plugins {
    id "com.gradle.enterprise" version "3.4.1"
}
include ':app'
rootProject.name = "gradle-build-cache-node-replication"

/**
 * Gradle built-in support for connecting to a remote build cache backend via HTTP.
 *
 * The recommended use case from the Gradle team for the build cache is that the CI server
 * populates the remote build cache with clean builds while developers pull from it and
 * push to a local build cache.
 *
 * The configuration would then look as follows:
 */
ext.isPush = "true"
buildCache {
    local {
        enabled = true
    }
    remote(HttpBuildCache) {

        // Create a variable called buildCacheNodesPropertiesFile and initialize it to your
        // build-cache-nodes.properties file, in the rootProject folder.
        def buildCacheNodesPropertiesFile = new File("build-cache-node-config.properties")

        if (!buildCacheNodesPropertiesFile.exists()) {
            url = "https://gradle-enterprise.your-domain.com/cache/"
        } else {
            // Initialize a new Properties() object called buildCacheNodesProperties
            def buildCacheNodesProperties = new Properties()

            // Load the build-cache-nodes.properties file into the buildCacheNodesProperties object.
            buildCacheNodesProperties.load(new FileInputStream(buildCacheNodesPropertiesFile))

            if (buildCacheNodesProperties != null
                    && buildCacheNodesProperties.containsKey('replicated_build_cache_node')) {

                // Set the default build cache node url
                url = buildCacheNodesProperties['replicated_build_cache_node']
            } else{
                // Set the dev specified build cache node url
                url = buildCacheNodesProperties['default_build_cache_node']
            }
        }

        push = isPush
        allowUntrustedServer = true
        enabled = true
    }
}